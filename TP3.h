#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define taillePARK 30
#define tailleNomMarque 30
#define tailleNomRayon 100
#define tailleNomMagasin 100
#define taillePrix 10
#define tailleQuantite 10
typedef struct Rayon T_Rayon;
typedef struct Produit T_Produit;

struct Produit{
	char marque[tailleNomMarque];
	float prix;
	char qualite; //valeur possible A, B ou C
	int quantite_en_stock;
	T_Produit* suivant; //Pointeur vers le produit suivant dans le rayon
	T_Rayon* rayon; //Utilisé que pour la fonction pour afficher prix, ne prend pas trop de place en mémoire
};


struct Rayon{
	char nom_rayon[tailleNomRayon];
	int nombre_produits; 
	//nombre de marques de produit distinctes dans le même rayon;
	//on considère que l'on ne peut pas avoir deux produits de la même marque dans un même rayon
	T_Produit* premier; //Pointeur vers le permier produit
	T_Rayon* suivant; //Pointeur vers le rayon suivant
};

typedef struct Magasin T_Magasin;
struct Magasin{
	char nom[tailleNomMagasin];
	T_Rayon* premier; //Pointeur vers le premier rayon du magasin
};

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


//METHODES COMMUNES------------------------------------------------------------------------------------------------------------------

//Vérifier que l'on saisie une chaine de caractère de la bonne taille selon le typé.
char* verifierNom(char* nom,char type);
 
//Vérifier qu'une marque entrée n'existe pas déjà dans le rayon. Le cas échéant demande un nouveau nom.
void verifierExistenceMarqueProduit(T_Rayon* rayon,char* marque);

//Fonction pour vérifer/blinder la saisie de qualité.
void checkQualite(char* q);

//Comparaison alphabétique insensible à la casse
//retourne -1 si str1 est avant str2; 0 si les deux sont égaux; 1 sinon
int strCompareAlpha(char* str1,char *str2);

//Fonction pour éviter les cafouillages avec scanf
void viderBuffer();

//Calcul du nombre de produits présents dans le magasin
int NombreProduitsMagasin(T_Magasin *magasin);

//Blindage de la saisie du prix
float saisiePrix();

//Fonction pour aficher de manière sympatique les prix
void afficherPrix(float prix);

//Blindage de la saisie de quantités
//Variante de la fonction saisiePrix
int saisieQuantite();

//Sélection d'un nouveau nom de rayon (avec blindage)
char* nouveauNomRayon(T_Magasin *magasin, char* nom);
 

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


//METHODE PRODUIT---------------------------------------------------------------------------------------------------------------------

//Initialistation d'un produit
T_Produit *creerProduit(char *marque, float prix, char qualite, int quantite);

//recherche si un produit est présent dans un rayon
T_Produit *chercherProduit(T_Rayon *rayon, char *marque);

//Ajout d'un produit dans un rayon
//Les différentes vérifications sont faites avant cet appel
int ajouterProduit(T_Rayon *rayon, T_Produit *produit);

//Suppresion d'un produit dans un rayon
//renvoie 1 si le retrait s'est bien passé, 0 sinon; on veillera à libérer la mémoire précédemment allouée
int supprimerProduit(T_Rayon *rayon, char* marque_produit);

//Recherche de produits se situant dans une fourchette de prix entrée par l'utilisateur
void rechercheProduits(T_Magasin *magasin, float prix_min, float prix_max);

//Affichage de la recherche de produits
void afficherRechercheProduit(T_Rayon *rayon);
	

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

//METHODE RAYON------------------------------------------------------------------------------------------------------------------------

//Initialisation d'un rayon
T_Rayon *creerRayon(char *nom);

//Ajout d'un rayon dans un magasin avec respect du tri alphabétique
//la vérification sur le nom de rayon a été faite avant l'appel de cette fonction
int ajouterRayon(T_Magasin *magasin, T_Rayon *rayon);

//Affichage de tous les produits d'un rayon
void afficherRayon(T_Rayon *rayon);
//L'affichage se fait sous forme de liste triée sur le prix du produit


//Fonction pour sélectionner un rayon dans un magasin
T_Rayon *selectionnerRayon(T_Magasin *magasin);

//Suppression d'un rayon et de tous les produits qu'il contient
//renvoie 1 si la suppression s'est bien passée, 0 sinon; on veillera à libérer la mémoire précédemment allouée
int supprimerRayon(T_Magasin *magasin, char *nom_rayon, int suppProduit);
	
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


//METHODE MAGASIN-------------------------------------------------------------------------------------------------------------------------
//initialisation d'un magasin
T_Magasin *creerMagasin(char *nom);

//Affichage de tous les rayons d'un magasin
void afficherMagasin(T_Magasin *magasin);
//L'affichage se fait sous forme de liste triée sur le nom des rayons

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////
//PARTIE INTERACTIVE-----------------------------------------------------------------------------------------------------------------------

//Affichage du menu
int afficherMenu();

//BLoc pour la création/initialisation d'un magasin
T_Magasin *creerMagasinWrapper();

//Bloc pour l'ajout d'un rayon
void ajouterRayonWrapper(T_Magasin *magasin);

//Bloc pour l'ajout d'un produit
void ajouterProduitWrapper(T_Magasin *magasin);

//Bloc pour afficher les rayons du magasin
void afficherMagasinWrapper(T_Magasin *magasin);

//Bloc pour afficher le comptenu d'un rayon 
void afficherRayonWrapper(T_Magasin *magasin);

//Bloc pour supprimer un produit
void supprimerProduitWrapper(T_Magasin *magasin);

//Bloc pour la suppression d'un rayon
void supprimerRayonWrapper(T_Magasin *magasin);

//Bloc pour la recherche des produits dans une fournchette de prix
void rechercheProduitsWrapper(T_Magasin *magasin);

//Bloc pour fusionner deux rayon d'un magasin
int fusionnerRayonsWrapper(T_Magasin *magasin);

//Vide tous les espaces mémoires d'un magain
void viderMagasin(T_Magasin *magasin);

//Remplissage d'un magasin pour tester
T_Magasin *testing();
